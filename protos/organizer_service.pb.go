// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.3
// source: protos/organizer_service.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetHackathonTeamsByNameRequest_ORDER int32

const (
	GetHackathonTeamsByNameRequest_ASC  GetHackathonTeamsByNameRequest_ORDER = 0
	GetHackathonTeamsByNameRequest_DESC GetHackathonTeamsByNameRequest_ORDER = 1
)

// Enum value maps for GetHackathonTeamsByNameRequest_ORDER.
var (
	GetHackathonTeamsByNameRequest_ORDER_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	GetHackathonTeamsByNameRequest_ORDER_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x GetHackathonTeamsByNameRequest_ORDER) Enum() *GetHackathonTeamsByNameRequest_ORDER {
	p := new(GetHackathonTeamsByNameRequest_ORDER)
	*p = x
	return p
}

func (x GetHackathonTeamsByNameRequest_ORDER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetHackathonTeamsByNameRequest_ORDER) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_organizer_service_proto_enumTypes[0].Descriptor()
}

func (GetHackathonTeamsByNameRequest_ORDER) Type() protoreflect.EnumType {
	return &file_protos_organizer_service_proto_enumTypes[0]
}

func (x GetHackathonTeamsByNameRequest_ORDER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetHackathonTeamsByNameRequest_ORDER.Descriptor instead.
func (GetHackathonTeamsByNameRequest_ORDER) EnumDescriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{14, 0}
}

type CreateHackathonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hackathon *Hackathon `protobuf:"bytes,1,opt,name=hackathon,proto3" json:"hackathon,omitempty"`
}

func (x *CreateHackathonRequest) Reset() {
	*x = CreateHackathonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHackathonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHackathonRequest) ProtoMessage() {}

func (x *CreateHackathonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHackathonRequest.ProtoReflect.Descriptor instead.
func (*CreateHackathonRequest) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHackathonRequest) GetHackathon() *Hackathon {
	if x != nil {
		return x.Hackathon
	}
	return nil
}

type CreateHackathonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hackathon *Hackathon `protobuf:"bytes,1,opt,name=hackathon,proto3" json:"hackathon,omitempty"`
	Error     *Error     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateHackathonResponse) Reset() {
	*x = CreateHackathonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHackathonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHackathonResponse) ProtoMessage() {}

func (x *CreateHackathonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHackathonResponse.ProtoReflect.Descriptor instead.
func (*CreateHackathonResponse) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHackathonResponse) GetHackathon() *Hackathon {
	if x != nil {
		return x.Hackathon
	}
	return nil
}

func (x *CreateHackathonResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type UpdateHackathonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hackathon *Hackathon `protobuf:"bytes,1,opt,name=hackathon,proto3" json:"hackathon,omitempty"`
}

func (x *UpdateHackathonRequest) Reset() {
	*x = UpdateHackathonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHackathonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHackathonRequest) ProtoMessage() {}

func (x *UpdateHackathonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHackathonRequest.ProtoReflect.Descriptor instead.
func (*UpdateHackathonRequest) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateHackathonRequest) GetHackathon() *Hackathon {
	if x != nil {
		return x.Hackathon
	}
	return nil
}

type UpdateHackathonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hackathon *Hackathon `protobuf:"bytes,1,opt,name=hackathon,proto3" json:"hackathon,omitempty"`
	Error     *Error     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UpdateHackathonResponse) Reset() {
	*x = UpdateHackathonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHackathonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHackathonResponse) ProtoMessage() {}

func (x *UpdateHackathonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHackathonResponse.ProtoReflect.Descriptor instead.
func (*UpdateHackathonResponse) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateHackathonResponse) GetHackathon() *Hackathon {
	if x != nil {
		return x.Hackathon
	}
	return nil
}

func (x *UpdateHackathonResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetHackathonsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHackathonsRequest) Reset() {
	*x = GetHackathonsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHackathonsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHackathonsRequest) ProtoMessage() {}

func (x *GetHackathonsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHackathonsRequest.ProtoReflect.Descriptor instead.
func (*GetHackathonsRequest) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{4}
}

type GetHackathonsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hackathons []*Hackathon `protobuf:"bytes,1,rep,name=hackathons,proto3" json:"hackathons,omitempty"`
	Error      *Error       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetHackathonsResponse) Reset() {
	*x = GetHackathonsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHackathonsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHackathonsResponse) ProtoMessage() {}

func (x *GetHackathonsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHackathonsResponse.ProtoReflect.Descriptor instead.
func (*GetHackathonsResponse) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetHackathonsResponse) GetHackathons() []*Hackathon {
	if x != nil {
		return x.Hackathons
	}
	return nil
}

func (x *GetHackathonsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type CloseSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *CloseSubscriptionsRequest) Reset() {
	*x = CloseSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSubscriptionsRequest) ProtoMessage() {}

func (x *CloseSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*CloseSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{6}
}

func (x *CloseSubscriptionsRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type CloseSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseSubscriptionsResponse) Reset() {
	*x = CloseSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSubscriptionsResponse) ProtoMessage() {}

func (x *CloseSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*CloseSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{7}
}

type OpenSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *OpenSubscriptionsRequest) Reset() {
	*x = OpenSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSubscriptionsRequest) ProtoMessage() {}

func (x *OpenSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*OpenSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{8}
}

func (x *OpenSubscriptionsRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type OpenSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenSubscriptionsResponse) Reset() {
	*x = OpenSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSubscriptionsResponse) ProtoMessage() {}

func (x *OpenSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*OpenSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{9}
}

type DeleteHackathonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteHackathonRequest) Reset() {
	*x = DeleteHackathonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHackathonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHackathonRequest) ProtoMessage() {}

func (x *DeleteHackathonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHackathonRequest.ProtoReflect.Descriptor instead.
func (*DeleteHackathonRequest) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteHackathonRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type DeleteHackathonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteHackathonResponse) Reset() {
	*x = DeleteHackathonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHackathonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHackathonResponse) ProtoMessage() {}

func (x *DeleteHackathonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHackathonResponse.ProtoReflect.Descriptor instead.
func (*DeleteHackathonResponse) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{11}
}

type GetHackathonTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HackathonId int64 `protobuf:"varint,1,opt,name=hackathon_id,json=hackathonId,proto3" json:"hackathon_id,omitempty"`
}

func (x *GetHackathonTeamsRequest) Reset() {
	*x = GetHackathonTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHackathonTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHackathonTeamsRequest) ProtoMessage() {}

func (x *GetHackathonTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHackathonTeamsRequest.ProtoReflect.Descriptor instead.
func (*GetHackathonTeamsRequest) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetHackathonTeamsRequest) GetHackathonId() int64 {
	if x != nil {
		return x.HackathonId
	}
	return 0
}

type GetHackathonTeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *GetHackathonTeamsResponse) Reset() {
	*x = GetHackathonTeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHackathonTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHackathonTeamsResponse) ProtoMessage() {}

func (x *GetHackathonTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHackathonTeamsResponse.ProtoReflect.Descriptor instead.
func (*GetHackathonTeamsResponse) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetHackathonTeamsResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type GetHackathonTeamsByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HackathonId int64                                `protobuf:"varint,1,opt,name=hackathon_id,json=hackathonId,proto3" json:"hackathon_id,omitempty"`
	Page        int32                                `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit       int32                                `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Order       GetHackathonTeamsByNameRequest_ORDER `protobuf:"varint,4,opt,name=order,proto3,enum=GetHackathonTeamsByNameRequest_ORDER" json:"order,omitempty"`
}

func (x *GetHackathonTeamsByNameRequest) Reset() {
	*x = GetHackathonTeamsByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHackathonTeamsByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHackathonTeamsByNameRequest) ProtoMessage() {}

func (x *GetHackathonTeamsByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHackathonTeamsByNameRequest.ProtoReflect.Descriptor instead.
func (*GetHackathonTeamsByNameRequest) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetHackathonTeamsByNameRequest) GetHackathonId() int64 {
	if x != nil {
		return x.HackathonId
	}
	return 0
}

func (x *GetHackathonTeamsByNameRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetHackathonTeamsByNameRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetHackathonTeamsByNameRequest) GetOrder() GetHackathonTeamsByNameRequest_ORDER {
	if x != nil {
		return x.Order
	}
	return GetHackathonTeamsByNameRequest_ASC
}

type GetHackathonTeamsByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *GetHackathonTeamsByNameResponse) Reset() {
	*x = GetHackathonTeamsByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_organizer_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHackathonTeamsByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHackathonTeamsByNameResponse) ProtoMessage() {}

func (x *GetHackathonTeamsByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_organizer_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHackathonTeamsByNameResponse.ProtoReflect.Descriptor instead.
func (*GetHackathonTeamsByNameResponse) Descriptor() ([]byte, []int) {
	return file_protos_organizer_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetHackathonTeamsByNameResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

var File_protos_organizer_service_proto protoreflect.FileDescriptor

var file_protos_organizer_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x42, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x68, 0x61, 0x63,
	0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48,
	0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x09, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74,
	0x68, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x63,
	0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x09, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x09, 0x68,
	0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x42, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x09, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52,
	0x09, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48, 0x61, 0x63, 0x6b, 0x61,
	0x74, 0x68, 0x6f, 0x6e, 0x52, 0x09, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x16, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b,
	0x61, 0x74, 0x68, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x0a, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x0a,
	0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2b, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x1b, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x38, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x1a, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53,
	0x43, 0x10, 0x01, 0x22, 0x3e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74,
	0x68, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x32, 0xf9, 0x04, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x63,
	0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e,
	0x73, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61,
	0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x63, 0x6b,
	0x61, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61,
	0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x19, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x61,
	0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b,
	0x61, 0x74, 0x68, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68,
	0x69, 0x61, 0x67, 0x6f, 0x74, 0x62, 0x6c, 0x2f, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f,
	0x6e, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_organizer_service_proto_rawDescOnce sync.Once
	file_protos_organizer_service_proto_rawDescData = file_protos_organizer_service_proto_rawDesc
)

func file_protos_organizer_service_proto_rawDescGZIP() []byte {
	file_protos_organizer_service_proto_rawDescOnce.Do(func() {
		file_protos_organizer_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_organizer_service_proto_rawDescData)
	})
	return file_protos_organizer_service_proto_rawDescData
}

var file_protos_organizer_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_organizer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_protos_organizer_service_proto_goTypes = []interface{}{
	(GetHackathonTeamsByNameRequest_ORDER)(0), // 0: GetHackathonTeamsByNameRequest.ORDER
	(*CreateHackathonRequest)(nil),            // 1: CreateHackathonRequest
	(*CreateHackathonResponse)(nil),           // 2: CreateHackathonResponse
	(*UpdateHackathonRequest)(nil),            // 3: UpdateHackathonRequest
	(*UpdateHackathonResponse)(nil),           // 4: UpdateHackathonResponse
	(*GetHackathonsRequest)(nil),              // 5: GetHackathonsRequest
	(*GetHackathonsResponse)(nil),             // 6: GetHackathonsResponse
	(*CloseSubscriptionsRequest)(nil),         // 7: CloseSubscriptionsRequest
	(*CloseSubscriptionsResponse)(nil),        // 8: CloseSubscriptionsResponse
	(*OpenSubscriptionsRequest)(nil),          // 9: OpenSubscriptionsRequest
	(*OpenSubscriptionsResponse)(nil),         // 10: OpenSubscriptionsResponse
	(*DeleteHackathonRequest)(nil),            // 11: DeleteHackathonRequest
	(*DeleteHackathonResponse)(nil),           // 12: DeleteHackathonResponse
	(*GetHackathonTeamsRequest)(nil),          // 13: GetHackathonTeamsRequest
	(*GetHackathonTeamsResponse)(nil),         // 14: GetHackathonTeamsResponse
	(*GetHackathonTeamsByNameRequest)(nil),    // 15: GetHackathonTeamsByNameRequest
	(*GetHackathonTeamsByNameResponse)(nil),   // 16: GetHackathonTeamsByNameResponse
	(*Hackathon)(nil),                         // 17: Hackathon
	(*Error)(nil),                             // 18: Error
	(*Team)(nil),                              // 19: Team
}
var file_protos_organizer_service_proto_depIdxs = []int32{
	17, // 0: CreateHackathonRequest.hackathon:type_name -> Hackathon
	17, // 1: CreateHackathonResponse.hackathon:type_name -> Hackathon
	18, // 2: CreateHackathonResponse.error:type_name -> Error
	17, // 3: UpdateHackathonRequest.hackathon:type_name -> Hackathon
	17, // 4: UpdateHackathonResponse.hackathon:type_name -> Hackathon
	18, // 5: UpdateHackathonResponse.error:type_name -> Error
	17, // 6: GetHackathonsResponse.hackathons:type_name -> Hackathon
	18, // 7: GetHackathonsResponse.error:type_name -> Error
	19, // 8: GetHackathonTeamsResponse.teams:type_name -> Team
	0,  // 9: GetHackathonTeamsByNameRequest.order:type_name -> GetHackathonTeamsByNameRequest.ORDER
	19, // 10: GetHackathonTeamsByNameResponse.teams:type_name -> Team
	1,  // 11: OrganizerService.CreateHackathon:input_type -> CreateHackathonRequest
	5,  // 12: OrganizerService.GetHackathons:input_type -> GetHackathonsRequest
	3,  // 13: OrganizerService.UpdateHackathon:input_type -> UpdateHackathonRequest
	7,  // 14: OrganizerService.CloseSubscriptions:input_type -> CloseSubscriptionsRequest
	9,  // 15: OrganizerService.OpenSubscriptions:input_type -> OpenSubscriptionsRequest
	11, // 16: OrganizerService.DeleteHackathon:input_type -> DeleteHackathonRequest
	13, // 17: OrganizerService.GetHackathonTeams:input_type -> GetHackathonTeamsRequest
	15, // 18: OrganizerService.GetHackathonTeamsByName:input_type -> GetHackathonTeamsByNameRequest
	2,  // 19: OrganizerService.CreateHackathon:output_type -> CreateHackathonResponse
	6,  // 20: OrganizerService.GetHackathons:output_type -> GetHackathonsResponse
	4,  // 21: OrganizerService.UpdateHackathon:output_type -> UpdateHackathonResponse
	8,  // 22: OrganizerService.CloseSubscriptions:output_type -> CloseSubscriptionsResponse
	10, // 23: OrganizerService.OpenSubscriptions:output_type -> OpenSubscriptionsResponse
	12, // 24: OrganizerService.DeleteHackathon:output_type -> DeleteHackathonResponse
	14, // 25: OrganizerService.GetHackathonTeams:output_type -> GetHackathonTeamsResponse
	16, // 26: OrganizerService.GetHackathonTeamsByName:output_type -> GetHackathonTeamsByNameResponse
	19, // [19:27] is the sub-list for method output_type
	11, // [11:19] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_protos_organizer_service_proto_init() }
func file_protos_organizer_service_proto_init() {
	if File_protos_organizer_service_proto != nil {
		return
	}
	file_protos_hackathon_proto_init()
	file_protos_team_proto_init()
	file_protos_error_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protos_organizer_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHackathonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHackathonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHackathonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHackathonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHackathonsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHackathonsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHackathonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHackathonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHackathonTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHackathonTeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHackathonTeamsByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_organizer_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHackathonTeamsByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_organizer_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_organizer_service_proto_goTypes,
		DependencyIndexes: file_protos_organizer_service_proto_depIdxs,
		EnumInfos:         file_protos_organizer_service_proto_enumTypes,
		MessageInfos:      file_protos_organizer_service_proto_msgTypes,
	}.Build()
	File_protos_organizer_service_proto = out.File
	file_protos_organizer_service_proto_rawDesc = nil
	file_protos_organizer_service_proto_goTypes = nil
	file_protos_organizer_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrganizerServiceClient is the client API for OrganizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrganizerServiceClient interface {
	CreateHackathon(ctx context.Context, in *CreateHackathonRequest, opts ...grpc.CallOption) (*CreateHackathonResponse, error)
	GetHackathons(ctx context.Context, in *GetHackathonsRequest, opts ...grpc.CallOption) (*GetHackathonsResponse, error)
	UpdateHackathon(ctx context.Context, in *UpdateHackathonRequest, opts ...grpc.CallOption) (*UpdateHackathonResponse, error)
	CloseSubscriptions(ctx context.Context, in *CloseSubscriptionsRequest, opts ...grpc.CallOption) (*CloseSubscriptionsResponse, error)
	OpenSubscriptions(ctx context.Context, in *OpenSubscriptionsRequest, opts ...grpc.CallOption) (*OpenSubscriptionsResponse, error)
	DeleteHackathon(ctx context.Context, in *DeleteHackathonRequest, opts ...grpc.CallOption) (*DeleteHackathonResponse, error)
	GetHackathonTeams(ctx context.Context, in *GetHackathonTeamsRequest, opts ...grpc.CallOption) (*GetHackathonTeamsResponse, error)
	GetHackathonTeamsByName(ctx context.Context, in *GetHackathonTeamsByNameRequest, opts ...grpc.CallOption) (*GetHackathonTeamsByNameResponse, error)
}

type organizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizerServiceClient(cc grpc.ClientConnInterface) OrganizerServiceClient {
	return &organizerServiceClient{cc}
}

func (c *organizerServiceClient) CreateHackathon(ctx context.Context, in *CreateHackathonRequest, opts ...grpc.CallOption) (*CreateHackathonResponse, error) {
	out := new(CreateHackathonResponse)
	err := c.cc.Invoke(ctx, "/OrganizerService/CreateHackathon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) GetHackathons(ctx context.Context, in *GetHackathonsRequest, opts ...grpc.CallOption) (*GetHackathonsResponse, error) {
	out := new(GetHackathonsResponse)
	err := c.cc.Invoke(ctx, "/OrganizerService/GetHackathons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) UpdateHackathon(ctx context.Context, in *UpdateHackathonRequest, opts ...grpc.CallOption) (*UpdateHackathonResponse, error) {
	out := new(UpdateHackathonResponse)
	err := c.cc.Invoke(ctx, "/OrganizerService/UpdateHackathon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) CloseSubscriptions(ctx context.Context, in *CloseSubscriptionsRequest, opts ...grpc.CallOption) (*CloseSubscriptionsResponse, error) {
	out := new(CloseSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/OrganizerService/CloseSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) OpenSubscriptions(ctx context.Context, in *OpenSubscriptionsRequest, opts ...grpc.CallOption) (*OpenSubscriptionsResponse, error) {
	out := new(OpenSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/OrganizerService/OpenSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) DeleteHackathon(ctx context.Context, in *DeleteHackathonRequest, opts ...grpc.CallOption) (*DeleteHackathonResponse, error) {
	out := new(DeleteHackathonResponse)
	err := c.cc.Invoke(ctx, "/OrganizerService/DeleteHackathon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) GetHackathonTeams(ctx context.Context, in *GetHackathonTeamsRequest, opts ...grpc.CallOption) (*GetHackathonTeamsResponse, error) {
	out := new(GetHackathonTeamsResponse)
	err := c.cc.Invoke(ctx, "/OrganizerService/GetHackathonTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizerServiceClient) GetHackathonTeamsByName(ctx context.Context, in *GetHackathonTeamsByNameRequest, opts ...grpc.CallOption) (*GetHackathonTeamsByNameResponse, error) {
	out := new(GetHackathonTeamsByNameResponse)
	err := c.cc.Invoke(ctx, "/OrganizerService/GetHackathonTeamsByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizerServiceServer is the server API for OrganizerService service.
type OrganizerServiceServer interface {
	CreateHackathon(context.Context, *CreateHackathonRequest) (*CreateHackathonResponse, error)
	GetHackathons(context.Context, *GetHackathonsRequest) (*GetHackathonsResponse, error)
	UpdateHackathon(context.Context, *UpdateHackathonRequest) (*UpdateHackathonResponse, error)
	CloseSubscriptions(context.Context, *CloseSubscriptionsRequest) (*CloseSubscriptionsResponse, error)
	OpenSubscriptions(context.Context, *OpenSubscriptionsRequest) (*OpenSubscriptionsResponse, error)
	DeleteHackathon(context.Context, *DeleteHackathonRequest) (*DeleteHackathonResponse, error)
	GetHackathonTeams(context.Context, *GetHackathonTeamsRequest) (*GetHackathonTeamsResponse, error)
	GetHackathonTeamsByName(context.Context, *GetHackathonTeamsByNameRequest) (*GetHackathonTeamsByNameResponse, error)
}

// UnimplementedOrganizerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrganizerServiceServer struct {
}

func (*UnimplementedOrganizerServiceServer) CreateHackathon(context.Context, *CreateHackathonRequest) (*CreateHackathonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHackathon not implemented")
}
func (*UnimplementedOrganizerServiceServer) GetHackathons(context.Context, *GetHackathonsRequest) (*GetHackathonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHackathons not implemented")
}
func (*UnimplementedOrganizerServiceServer) UpdateHackathon(context.Context, *UpdateHackathonRequest) (*UpdateHackathonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHackathon not implemented")
}
func (*UnimplementedOrganizerServiceServer) CloseSubscriptions(context.Context, *CloseSubscriptionsRequest) (*CloseSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSubscriptions not implemented")
}
func (*UnimplementedOrganizerServiceServer) OpenSubscriptions(context.Context, *OpenSubscriptionsRequest) (*OpenSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSubscriptions not implemented")
}
func (*UnimplementedOrganizerServiceServer) DeleteHackathon(context.Context, *DeleteHackathonRequest) (*DeleteHackathonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHackathon not implemented")
}
func (*UnimplementedOrganizerServiceServer) GetHackathonTeams(context.Context, *GetHackathonTeamsRequest) (*GetHackathonTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHackathonTeams not implemented")
}
func (*UnimplementedOrganizerServiceServer) GetHackathonTeamsByName(context.Context, *GetHackathonTeamsByNameRequest) (*GetHackathonTeamsByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHackathonTeamsByName not implemented")
}

func RegisterOrganizerServiceServer(s *grpc.Server, srv OrganizerServiceServer) {
	s.RegisterService(&_OrganizerService_serviceDesc, srv)
}

func _OrganizerService_CreateHackathon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHackathonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).CreateHackathon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrganizerService/CreateHackathon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).CreateHackathon(ctx, req.(*CreateHackathonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_GetHackathons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHackathonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).GetHackathons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrganizerService/GetHackathons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).GetHackathons(ctx, req.(*GetHackathonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_UpdateHackathon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHackathonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).UpdateHackathon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrganizerService/UpdateHackathon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).UpdateHackathon(ctx, req.(*UpdateHackathonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_CloseSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).CloseSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrganizerService/CloseSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).CloseSubscriptions(ctx, req.(*CloseSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_OpenSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).OpenSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrganizerService/OpenSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).OpenSubscriptions(ctx, req.(*OpenSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_DeleteHackathon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHackathonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).DeleteHackathon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrganizerService/DeleteHackathon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).DeleteHackathon(ctx, req.(*DeleteHackathonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_GetHackathonTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHackathonTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).GetHackathonTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrganizerService/GetHackathonTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).GetHackathonTeams(ctx, req.(*GetHackathonTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizerService_GetHackathonTeamsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHackathonTeamsByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizerServiceServer).GetHackathonTeamsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrganizerService/GetHackathonTeamsByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizerServiceServer).GetHackathonTeamsByName(ctx, req.(*GetHackathonTeamsByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrganizerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OrganizerService",
	HandlerType: (*OrganizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHackathon",
			Handler:    _OrganizerService_CreateHackathon_Handler,
		},
		{
			MethodName: "GetHackathons",
			Handler:    _OrganizerService_GetHackathons_Handler,
		},
		{
			MethodName: "UpdateHackathon",
			Handler:    _OrganizerService_UpdateHackathon_Handler,
		},
		{
			MethodName: "CloseSubscriptions",
			Handler:    _OrganizerService_CloseSubscriptions_Handler,
		},
		{
			MethodName: "OpenSubscriptions",
			Handler:    _OrganizerService_OpenSubscriptions_Handler,
		},
		{
			MethodName: "DeleteHackathon",
			Handler:    _OrganizerService_DeleteHackathon_Handler,
		},
		{
			MethodName: "GetHackathonTeams",
			Handler:    _OrganizerService_GetHackathonTeams_Handler,
		},
		{
			MethodName: "GetHackathonTeamsByName",
			Handler:    _OrganizerService_GetHackathonTeamsByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/organizer_service.proto",
}
